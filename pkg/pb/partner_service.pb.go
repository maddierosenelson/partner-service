// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/pb/partner_service.proto

/*
Package pb is a generated protocol buffer package.

Defines package in generated code. For Go, should be same name as directory.

It is generated from these files:
	pkg/pb/partner_service.proto

It has these top-level messages:
	KeyValueRequest
	IdRequest
	PartnerDataReply
	Partner
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message definitions.
type KeyValueRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Group string `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (m *KeyValueRequest) Reset()                    { *m = KeyValueRequest{} }
func (m *KeyValueRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyValueRequest) ProtoMessage()               {}
func (*KeyValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KeyValueRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type IdRequest struct {
	PartnerId   int32  `protobuf:"varint,1,opt,name=partnerId" json:"partnerId,omitempty"`
	PartnerCode string `protobuf:"bytes,2,opt,name=partnerCode" json:"partnerCode,omitempty"`
	Group       string `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (m *IdRequest) Reset()                    { *m = IdRequest{} }
func (m *IdRequest) String() string            { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()               {}
func (*IdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IdRequest) GetPartnerId() int32 {
	if m != nil {
		return m.PartnerId
	}
	return 0
}

func (m *IdRequest) GetPartnerCode() string {
	if m != nil {
		return m.PartnerCode
	}
	return ""
}

func (m *IdRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type PartnerDataReply struct {
	PartnerId   int32             `protobuf:"varint,1,opt,name=PartnerId" json:"PartnerId,omitempty"`
	PartnerCode string            `protobuf:"bytes,2,opt,name=PartnerCode" json:"PartnerCode,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,3,rep,name=Attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error       string            `protobuf:"bytes,4,opt,name=Error" json:"Error,omitempty"`
}

func (m *PartnerDataReply) Reset()                    { *m = PartnerDataReply{} }
func (m *PartnerDataReply) String() string            { return proto.CompactTextString(m) }
func (*PartnerDataReply) ProtoMessage()               {}
func (*PartnerDataReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PartnerDataReply) GetPartnerId() int32 {
	if m != nil {
		return m.PartnerId
	}
	return 0
}

func (m *PartnerDataReply) GetPartnerCode() string {
	if m != nil {
		return m.PartnerCode
	}
	return ""
}

func (m *PartnerDataReply) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *PartnerDataReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Partner struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Code       string            `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Id         int32             `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Partner) Reset()                    { *m = Partner{} }
func (m *Partner) String() string            { return proto.CompactTextString(m) }
func (*Partner) ProtoMessage()               {}
func (*Partner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Partner) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Partner) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Partner) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Partner) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyValueRequest)(nil), "pb.KeyValueRequest")
	proto.RegisterType((*IdRequest)(nil), "pb.IdRequest")
	proto.RegisterType((*PartnerDataReply)(nil), "pb.PartnerDataReply")
	proto.RegisterType((*Partner)(nil), "pb.Partner")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PartnerService service

type PartnerServiceClient interface {
	GetPartnerDataByKeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*PartnerDataReply, error)
	GetDataById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*PartnerDataReply, error)
}

type partnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPartnerServiceClient(cc *grpc.ClientConn) PartnerServiceClient {
	return &partnerServiceClient{cc}
}

func (c *partnerServiceClient) GetPartnerDataByKeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*PartnerDataReply, error) {
	out := new(PartnerDataReply)
	err := grpc.Invoke(ctx, "/pb.PartnerService/GetPartnerDataByKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetDataById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*PartnerDataReply, error) {
	out := new(PartnerDataReply)
	err := grpc.Invoke(ctx, "/pb.PartnerService/GetDataById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PartnerService service

type PartnerServiceServer interface {
	GetPartnerDataByKeyValue(context.Context, *KeyValueRequest) (*PartnerDataReply, error)
	GetDataById(context.Context, *IdRequest) (*PartnerDataReply, error)
}

func RegisterPartnerServiceServer(s *grpc.Server, srv PartnerServiceServer) {
	s.RegisterService(&_PartnerService_serviceDesc, srv)
}

func _PartnerService_GetPartnerDataByKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartnerDataByKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PartnerService/GetPartnerDataByKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartnerDataByKeyValue(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PartnerService/GetDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetDataById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PartnerService",
	HandlerType: (*PartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartnerDataByKeyValue",
			Handler:    _PartnerService_GetPartnerDataByKeyValue_Handler,
		},
		{
			MethodName: "GetDataById",
			Handler:    _PartnerService_GetDataById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/partner_service.proto",
}

func init() { proto.RegisterFile("pkg/pb/partner_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0xca, 0xd3, 0x40,
	0x10, 0x26, 0x49, 0xab, 0x74, 0x8a, 0x6d, 0x59, 0x8b, 0x84, 0x36, 0x42, 0x89, 0x1e, 0x7a, 0x69,
	0x82, 0xf5, 0x22, 0x8a, 0x07, 0xb5, 0xa5, 0x14, 0x0f, 0x86, 0x08, 0x5e, 0x65, 0xd3, 0x2c, 0x21,
	0xb6, 0x66, 0xd7, 0xcd, 0xa6, 0x92, 0xab, 0xaf, 0xe0, 0xf3, 0xf8, 0x0a, 0x5e, 0x7c, 0x05, 0xaf,
	0xbe, 0x83, 0xec, 0x6e, 0x62, 0x42, 0x6a, 0xe1, 0x87, 0xff, 0x36, 0xf3, 0x31, 0xf3, 0x7d, 0xdf,
	0xcc, 0xce, 0x82, 0xc3, 0x8e, 0x89, 0xcf, 0x22, 0x9f, 0x61, 0x2e, 0x32, 0xc2, 0x3f, 0xe6, 0x84,
	0x9f, 0xd3, 0x03, 0xf1, 0x18, 0xa7, 0x82, 0x22, 0x93, 0x45, 0x33, 0x27, 0xa1, 0x34, 0x39, 0x11,
	0x1f, 0xb3, 0xd4, 0xc7, 0x59, 0x46, 0x05, 0x16, 0x29, 0xcd, 0x72, 0x5d, 0xe1, 0xbe, 0x83, 0xf1,
	0x5b, 0x52, 0x7e, 0xc0, 0xa7, 0x82, 0x84, 0xe4, 0x4b, 0x41, 0x72, 0x81, 0x26, 0x60, 0x1d, 0x49,
	0x69, 0x1b, 0x0b, 0x63, 0x39, 0x08, 0x65, 0x88, 0xa6, 0xd0, 0x3f, 0xcb, 0x0a, 0xdb, 0x54, 0x98,
	0x4e, 0x24, 0x9a, 0x70, 0x5a, 0x30, 0xdb, 0xd2, 0xa8, 0x4a, 0x5c, 0x0c, 0x83, 0x7d, 0x5c, 0x53,
	0x39, 0x30, 0xa8, 0x8c, 0xed, 0x63, 0x45, 0xd8, 0x0f, 0x1b, 0x00, 0x2d, 0x60, 0x58, 0x25, 0x6f,
	0x68, 0x5c, 0x93, 0xb7, 0xa1, 0x2b, 0x12, 0x7f, 0x0c, 0x98, 0x04, 0xba, 0x6a, 0x83, 0x05, 0x0e,
	0x09, 0x3b, 0x95, 0x52, 0x2a, 0xe8, 0x4a, 0x05, 0x6d, 0xa9, 0xe0, 0x52, 0xaa, 0x05, 0xa1, 0x0d,
	0xc0, 0x2b, 0x21, 0x78, 0x1a, 0x15, 0x82, 0xe4, 0xb6, 0xb5, 0xb0, 0x96, 0xc3, 0xf5, 0x63, 0x8f,
	0x45, 0x5e, 0x57, 0xc9, 0x6b, 0xca, 0xb6, 0x99, 0xe0, 0x65, 0xd8, 0xea, 0x93, 0x86, 0xb7, 0x9c,
	0x53, 0x6e, 0xf7, 0xb4, 0x61, 0x95, 0xcc, 0x5e, 0xc2, 0xb8, 0xd3, 0x74, 0xd3, 0x25, 0x3f, 0x37,
	0x9f, 0x19, 0xee, 0x0f, 0x03, 0xee, 0x56, 0x2e, 0x10, 0x82, 0x5e, 0x86, 0x3f, 0x93, 0xaa, 0x51,
	0xc5, 0x12, 0x3b, 0x34, 0x53, 0xa9, 0x18, 0x8d, 0xc0, 0x4c, 0x63, 0xb5, 0xb6, 0x7e, 0x68, 0xa6,
	0x31, 0x7a, 0x01, 0x80, 0x9b, 0xf1, 0x7a, 0x6a, 0xbc, 0x79, 0x6b, 0xbc, 0xcb, 0xa9, 0x9a, 0xf2,
	0x5b, 0xfa, 0x5f, 0xff, 0x34, 0x60, 0x54, 0xc9, 0xbc, 0xd7, 0xe7, 0x89, 0x3e, 0x81, 0xbd, 0x23,
	0xa2, 0xb5, 0xda, 0xd7, 0x65, 0x7d, 0x86, 0xe8, 0xbe, 0xb4, 0xd5, 0x39, 0xca, 0xd9, 0xf4, 0x7f,
	0x4f, 0xe1, 0x3e, 0xfa, 0xf6, 0xeb, 0xf7, 0x77, 0xf3, 0x21, 0x9a, 0xfb, 0x5f, 0x73, 0xff, 0xfc,
	0xa4, 0xfe, 0x05, 0xab, 0xa8, 0x5c, 0x1d, 0x49, 0xb9, 0xd2, 0x77, 0x1a, 0xc0, 0x70, 0x47, 0x84,
	0x16, 0xd9, 0xc7, 0xe8, 0x9e, 0x64, 0xfa, 0x77, 0xa2, 0x57, 0x88, 0x1d, 0x45, 0xfc, 0x00, 0x4d,
	0x2f, 0x89, 0xd3, 0x38, 0xba, 0xa3, 0xfe, 0xce, 0xd3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9d,
	0x70, 0x12, 0x2e, 0x7d, 0x03, 0x00, 0x00,
}
